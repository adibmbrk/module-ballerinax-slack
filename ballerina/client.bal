// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://slack.com/api") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    resource isolated function get admin\.apps\.approved\.list(map<string|string[]> headers = {}, *Admin_apps_approved_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.apps.approved.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.apps\.requests\.list(map<string|string[]> headers = {}, *Admin_apps_requests_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.apps.requests.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.apps\.restricted\.list(map<string|string[]> headers = {}, *Admin_apps_restricted_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.apps.restricted.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.conversations\.ekm\.listOriginalConnectedChannelInfo(map<string|string[]> headers = {}, *Admin_conversations_ekm_listOriginalConnectedChannelInfoQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.conversations.ekm.listOriginalConnectedChannelInfo`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.conversations\.getConversationPrefs(Admin_conversations_getConversationPrefsHeaders headers, *Admin_conversations_getConversationPrefsQueries queries) returns json|error {
        string resourcePath = string `/admin.conversations.getConversationPrefs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.conversations\.getTeams(Admin_conversations_getTeamsHeaders headers, *Admin_conversations_getTeamsQueries queries) returns json|error {
        string resourcePath = string `/admin.conversations.getTeams`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.conversations\.restrictAccess\.listGroups(map<string|string[]> headers = {}, *Admin_conversations_restrictAccess_listGroupsQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.conversations.restrictAccess.listGroups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.conversations\.search(Admin_conversations_searchHeaders headers, *Admin_conversations_searchQueries queries) returns json|error {
        string resourcePath = string `/admin.conversations.search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.emoji\.list(map<string|string[]> headers = {}, *Admin_emoji_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.emoji.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.inviteRequests\.approved\.list(Admin_inviteRequests_approved_listHeaders headers, *Admin_inviteRequests_approved_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.inviteRequests.approved.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.inviteRequests\.denied\.list(Admin_inviteRequests_denied_listHeaders headers, *Admin_inviteRequests_denied_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.inviteRequests.denied.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.inviteRequests\.list(Admin_inviteRequests_listHeaders headers, *Admin_inviteRequests_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.inviteRequests.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.teams\.admins\.list(map<string|string[]> headers = {}, *Admin_teams_admins_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.admins.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.teams\.list(Admin_teams_listHeaders headers, *Admin_teams_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.teams\.owners\.list(map<string|string[]> headers = {}, *Admin_teams_owners_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.owners.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.teams\.settings\.info(Admin_teams_settings_infoHeaders headers, *Admin_teams_settings_infoQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.settings.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.usergroups\.listChannels(Admin_usergroups_listChannelsHeaders headers, *Admin_usergroups_listChannelsQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.usergroups.listChannels`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get admin\.users\.list(Admin_users_listHeaders headers, *Admin_users_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api\.test(map<string|string[]> headers = {}, *Api_testQueries queries) returns json|error {
        string resourcePath = string `/api.test`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.event\.authorizations\.list(Apps_event_authorizations_listHeaders headers, *Apps_event_authorizations_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/apps.event.authorizations.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get apps\.permissions\.info(map<string|string[]> headers = {}, *Apps_permissions_infoQueries queries) returns json|error {
        string resourcePath = string `/apps.permissions.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.request(map<string|string[]> headers = {}, *Apps_permissions_requestQueries queries) returns json|error {
        string resourcePath = string `/apps.permissions.request`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.resources\.list(map<string|string[]> headers = {}, *Apps_permissions_resources_listQueries queries) returns json|error {
        string resourcePath = string `/apps.permissions.resources.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.scopes\.list(map<string|string[]> headers = {}, *Apps_permissions_scopes_listQueries queries) returns json|error {
        string resourcePath = string `/apps.permissions.scopes.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.users\.list(map<string|string[]> headers = {}, *Apps_permissions_users_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/apps.permissions.users.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.users\.request(map<string|string[]> headers = {}, *Apps_permissions_users_requestQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/apps.permissions.users.request`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.uninstall(map<string|string[]> headers = {}, *Apps_uninstallQueries queries) returns json|error {
        string resourcePath = string `/apps.uninstall`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get auth\.revoke(map<string|string[]> headers = {}, *Auth_revokeQueries queries) returns json|error {
        string resourcePath = string `/auth.revoke`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get auth\.test(Auth_testHeaders headers) returns json|error {
        string resourcePath = string `/auth.test`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get bots\.info(map<string|string[]> headers = {}, *Bots_infoQueries queries) returns json|error {
        string resourcePath = string `/bots.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get calls\.info(Calls_infoHeaders headers, *Calls_infoQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/calls.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get chat\.getPermalink(map<string|string[]> headers = {}, *Chat_getPermalinkQueries queries) returns json|error {
        string resourcePath = string `/chat.getPermalink`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get chat\.scheduledMessages\.list(Chat_scheduledMessages_listHeaders headers = {}, *Chat_scheduledMessages_listQueries queries) returns json|error {
        string resourcePath = string `/chat.scheduledMessages.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get conversations\.history(map<string|string[]> headers = {}, *Conversations_historyQueries queries) returns json|error {
        string resourcePath = string `/conversations.history`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get conversations\.info(map<string|string[]> headers = {}, *Conversations_infoQueries queries) returns json|error {
        string resourcePath = string `/conversations.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get conversations\.list(map<string|string[]> headers = {}, *Conversations_listQueries queries) returns json|error {
        string resourcePath = string `/conversations.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get conversations\.members(map<string|string[]> headers = {}, *Conversations_membersQueries queries) returns json|error {
        string resourcePath = string `/conversations.members`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get conversations\.replies(map<string|string[]> headers = {}, *Conversations_repliesQueries queries) returns json|error {
        string resourcePath = string `/conversations.replies`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get dialog\.open(Dialog_openHeaders headers, *Dialog_openQueries queries) returns json|error {
        string resourcePath = string `/dialog.open`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get dnd\.info(map<string|string[]> headers = {}, *Dnd_infoQueries queries) returns json|error {
        string resourcePath = string `/dnd.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get dnd\.teamInfo(map<string|string[]> headers = {}, *Dnd_teamInfoQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/dnd.teamInfo`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get emoji\.list(map<string|string[]> headers = {}, *Emoji_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/emoji.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get files\.info(map<string|string[]> headers = {}, *Files_infoQueries queries) returns json|error {
        string resourcePath = string `/files.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get files\.list(map<string|string[]> headers = {}, *Files_listQueries queries) returns json|error {
        string resourcePath = string `/files.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get files\.remote\.info(map<string|string[]> headers = {}, *Files_remote_infoQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/files.remote.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get files\.remote\.list(map<string|string[]> headers = {}, *Files_remote_listQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/files.remote.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get files\.remote\.share(map<string|string[]> headers = {}, *Files_remote_shareQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/files.remote.share`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get migration\.exchange(map<string|string[]> headers = {}, *Migration_exchangeQueries queries) returns json|error {
        string resourcePath = string `/migration.exchange`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get oauth\.access(map<string|string[]> headers = {}, *Oauth_accessQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/oauth.access`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get oauth\.token(map<string|string[]> headers = {}, *Oauth_tokenQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/oauth.token`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get oauth\.v2\.access(map<string|string[]> headers = {}, *Oauth_v2_accessQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/oauth.v2.access`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get pins\.list(map<string|string[]> headers = {}, *Pins_listQueries queries) returns record {|(record {|int created?; defs_user_id created_by?; objs_file file?; "file" 'type?;|}|record {|defs_channel channel?; int created?; defs_user_id created_by?; objs_message message?; "message" 'type?;|})[] items; defs_ok_true ok;|}|record {|int count; defs_ok_true ok;|}[]|error {
        string resourcePath = string `/pins.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get reactions\.get(map<string|string[]> headers = {}, *Reactions_getQueries queries) returns record {|defs_channel channel; objs_message message; defs_ok_true ok; "message" 'type;|}|record {|objs_file file; defs_ok_true ok; "file" 'type;|}|record {|objs_comment comment; objs_file file; defs_ok_true ok; "file_comment" 'type;|}[]|error {
        string resourcePath = string `/reactions.get`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get reactions\.list(map<string|string[]> headers = {}, *Reactions_listQueries queries) returns json|error {
        string resourcePath = string `/reactions.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get reminders\.info(map<string|string[]> headers = {}, *Reminders_infoQueries queries) returns json|error {
        string resourcePath = string `/reminders.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get reminders\.list(map<string|string[]> headers = {}, *Reminders_listQueries queries) returns json|error {
        string resourcePath = string `/reminders.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get rtm\.connect(map<string|string[]> headers = {}, *Rtm_connectQueries queries) returns json|error {
        string resourcePath = string `/rtm.connect`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get search\.messages(map<string|string[]> headers = {}, *Search_messagesQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/search.messages`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get stars\.list(map<string|string[]> headers = {}, *Stars_listQueries queries) returns json|error {
        string resourcePath = string `/stars.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.accessLogs(map<string|string[]> headers = {}, *Team_accessLogsQueries queries) returns json|error {
        string resourcePath = string `/team.accessLogs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.billableInfo(map<string|string[]> headers = {}, *Team_billableInfoQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/team.billableInfo`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.info(map<string|string[]> headers = {}, *Team_infoQueries queries) returns json|error {
        string resourcePath = string `/team.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.integrationLogs(map<string|string[]> headers = {}, *Team_integrationLogsQueries queries) returns json|error {
        string resourcePath = string `/team.integrationLogs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.profile\.get(map<string|string[]> headers = {}, *Team_profile_getQueries queries) returns json|error {
        string resourcePath = string `/team.profile.get`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get usergroups\.list(map<string|string[]> headers = {}, *Usergroups_listQueries queries) returns json|error {
        string resourcePath = string `/usergroups.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get usergroups\.users\.list(map<string|string[]> headers = {}, *Usergroups_users_listQueries queries) returns json|error {
        string resourcePath = string `/usergroups.users.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.conversations(map<string|string[]> headers = {}, *Users_conversationsQueries queries) returns json|error {
        string resourcePath = string `/users.conversations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.getPresence(map<string|string[]> headers = {}, *Users_getPresenceQueries queries) returns json|error {
        string resourcePath = string `/users.getPresence`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.identity(map<string|string[]> headers = {}, *Users_identityQueries queries) returns record {|defs_ok_true ok; record {|defs_team id;|} team; record {|defs_user_id id; string name;|} user;|}|record {|defs_ok_true ok; record {|defs_team id;|} team; record {|string email; defs_user_id id; string name;|} user;|}|record {|defs_ok_true ok; record {|defs_team id;|} team; record {|defs_user_id id; string image_192; string image_24; string image_32; string image_48; string image_512; string image_72; string name;|} user;|}|record {|defs_ok_true ok; record {|string domain; defs_team id; string image_102; string image_132; string image_230; string image_34; string image_44; string image_68; string image_88; boolean image_default; string name;|} team; record {|defs_user_id id; string name;|} user;|}[]|error {
        string resourcePath = string `/users.identity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.info(map<string|string[]> headers = {}, *Users_infoQueries queries) returns json|error {
        string resourcePath = string `/users.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.list(map<string|string[]> headers = {}, *Users_listQueries queries) returns json|error {
        string resourcePath = string `/users.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.lookupByEmail(map<string|string[]> headers = {}, *Users_lookupByEmailQueries queries) returns json|error {
        string resourcePath = string `/users.lookupByEmail`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.profile\.get(map<string|string[]> headers = {}, *Users_profile_getQueries queries) returns json|error {
        string resourcePath = string `/users.profile.get`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get views\.open(Views_openHeaders headers, *Views_openQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/views.open`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get views\.publish(Views_publishHeaders headers, *Views_publishQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/views.publish`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get views\.push(Views_pushHeaders headers, *Views_pushQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/views.push`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get views\.update(Views_updateHeaders headers, *Views_updateQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/views.update`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get workflows\.stepCompleted(Workflows_stepCompletedHeaders headers, *Workflows_stepCompletedQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/workflows.stepCompleted`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get workflows\.stepFailed(Workflows_stepFailedHeaders headers, *Workflows_stepFailedQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/workflows.stepFailed`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get workflows\.updateStep(Workflows_updateStepHeaders headers, *Workflows_updateStepQueries queries) returns Default\ success\ template|error {
        string resourcePath = string `/workflows.updateStep`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function post admin\.apps\.approve(admin_apps_approve_body payload, Admin_apps_approveHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.apps.approve`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.apps\.restrict(admin_apps_restrict_body payload, Admin_apps_restrictHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.apps.restrict`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.archive(admin_conversations_archive_body payload, Admin_conversations_archiveHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.archive`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.convertToPrivate(admin_conversations_convertToPrivate_body payload, Admin_conversations_convertToPrivateHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.convertToPrivate`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.create(admin_conversations_create_body payload, Admin_conversations_createHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.delete(admin_conversations_delete_body payload, Admin_conversations_deleteHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.disconnectShared(admin_conversations_disconnectShared_body payload, Admin_conversations_disconnectSharedHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.disconnectShared`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.invite(admin_conversations_invite_body payload, Admin_conversations_inviteHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.invite`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.rename(admin_conversations_rename_body payload, Admin_conversations_renameHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.rename`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.restrictAccess\.addGroup(admin_conversations_restrictAccess_addGroup_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/admin.conversations.restrictAccess.addGroup`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.restrictAccess\.removeGroup(admin_conversations_restrictAccess_removeGroup_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/admin.conversations.restrictAccess.removeGroup`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.setConversationPrefs(admin_conversations_setConversationPrefs_body payload, Admin_conversations_setConversationPrefsHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.setConversationPrefs`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.setTeams(admin_conversations_setTeams_body payload, Admin_conversations_setTeamsHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.conversations.setTeams`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.conversations\.unarchive(admin_conversations_unarchive_body payload, Admin_conversations_unarchiveHeaders headers) returns json|error {
        string resourcePath = string `/admin.conversations.unarchive`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.emoji\.add(admin_emoji_add_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/admin.emoji.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.emoji\.addAlias(admin_emoji_addAlias_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/admin.emoji.addAlias`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.emoji\.remove(admin_emoji_remove_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/admin.emoji.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.emoji\.rename(admin_emoji_rename_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/admin.emoji.rename`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.inviteRequests\.approve(record {string invite_request_id; string team_id?;} payload, Admin_inviteRequests_approveHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.inviteRequests.approve`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.inviteRequests\.deny(record {string invite_request_id; string team_id?;} payload, Admin_inviteRequests_denyHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.inviteRequests.deny`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.teams\.create(admin_teams_create_body payload, Admin_teams_createHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.teams\.settings\.setDefaultChannels(admin_teams_settings_setDefaultChannels_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.settings.setDefaultChannels`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.teams\.settings\.setDescription(admin_teams_settings_setDescription_body payload, Admin_teams_settings_setDescriptionHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.settings.setDescription`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.teams\.settings\.setDiscoverability(admin_teams_settings_setDiscoverability_body payload, Admin_teams_settings_setDiscoverabilityHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.settings.setDiscoverability`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.teams\.settings\.setIcon(admin_teams_settings_setIcon_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.settings.setIcon`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.teams\.settings\.setName(admin_teams_settings_setName_body payload, Admin_teams_settings_setNameHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.teams.settings.setName`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.usergroups\.addChannels(admin_usergroups_addChannels_body payload, Admin_usergroups_addChannelsHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.usergroups.addChannels`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.usergroups\.addTeams(admin_usergroups_addTeams_body payload, Admin_usergroups_addTeamsHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.usergroups.addTeams`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.usergroups\.removeChannels(admin_usergroups_removeChannels_body payload, Admin_usergroups_removeChannelsHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.usergroups.removeChannels`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.assign(admin_users_assign_body payload, Admin_users_assignHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.assign`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.invite(admin_users_invite_body payload, Admin_users_inviteHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.invite`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.remove(admin_users_remove_body payload, Admin_users_removeHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.session\.invalidate(admin_users_session_invalidate_body payload, Admin_users_session_invalidateHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.session.invalidate`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.session\.reset(admin_users_session_reset_body payload, Admin_users_session_resetHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.session.reset`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.setAdmin(admin_users_setAdmin_body payload, Admin_users_setAdminHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.setAdmin`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.setExpiration(admin_users_setExpiration_body payload, Admin_users_setExpirationHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.setExpiration`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.setOwner(admin_users_setOwner_body payload, Admin_users_setOwnerHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.setOwner`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.setRegular(admin_users_setRegular_body payload, Admin_users_setRegularHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/admin.users.setRegular`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post calls\.add(calls_add_body payload, Calls_addHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/calls.add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post calls\.end(calls_end_body payload, Calls_endHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/calls.end`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post calls\.participants\.add(calls_participants_add_body payload, Calls_participants_addHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/calls.participants.add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post calls\.participants\.remove(calls_participants_remove_body payload, Calls_participants_removeHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/calls.participants.remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post calls\.update(calls_update_body payload, Calls_updateHeaders headers) returns Default\ success\ template|error {
        string resourcePath = string `/calls.update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post chat\.delete(chat_delete_body payload, Chat_deleteHeaders headers = {}) returns json|error {
        string resourcePath = string `/chat.delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post chat\.deleteScheduledMessage(chat_deleteScheduledMessage_body payload, Chat_deleteScheduledMessageHeaders headers) returns json|error {
        string resourcePath = string `/chat.deleteScheduledMessage`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post chat\.meMessage(chat_meMessage_body payload, Chat_meMessageHeaders headers = {}) returns json|error {
        string resourcePath = string `/chat.meMessage`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post chat\.postEphemeral(chat_postEphemeral_body payload, Chat_postEphemeralHeaders headers) returns json|error {
        string resourcePath = string `/chat.postEphemeral`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post chat\.postMessage(chat_postMessage_body payload, Chat_postMessageHeaders headers) returns json|error {
        string resourcePath = string `/chat.postMessage`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post chat\.scheduleMessage(chat_scheduleMessage_body payload, Chat_scheduleMessageHeaders headers = {}) returns json|error {
        string resourcePath = string `/chat.scheduleMessage`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post chat\.unfurl(chat_unfurl_body payload, Chat_unfurlHeaders headers) returns json|error {
        string resourcePath = string `/chat.unfurl`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post chat\.update(chat_update_body payload, Chat_updateHeaders headers) returns json|error {
        string resourcePath = string `/chat.update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.archive(conversations_archive_body payload, Conversations_archiveHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.archive`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.close(conversations_close_body payload, Conversations_closeHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.close`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.create(conversations_create_body payload, Conversations_createHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.invite(conversations_invite_body payload, Conversations_inviteHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.invite`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.join(conversations_join_body payload, Conversations_joinHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.join`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.kick(conversations_kick_body payload, Conversations_kickHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.kick`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.leave(conversations_leave_body payload, Conversations_leaveHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.leave`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.mark(conversations_mark_body payload, Conversations_markHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.mark`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.open(conversations_open_body payload, Conversations_openHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.open`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.rename(conversations_rename_body payload, Conversations_renameHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.rename`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.setPurpose(conversations_setPurpose_body payload, Conversations_setPurposeHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.setPurpose`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.setTopic(conversations_setTopic_body payload, Conversations_setTopicHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.setTopic`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post conversations\.unarchive(conversations_unarchive_body payload, Conversations_unarchiveHeaders headers = {}) returns json|error {
        string resourcePath = string `/conversations.unarchive`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post dnd\.endDnd(Dnd_endDndHeaders headers) returns json|error {
        string resourcePath = string `/dnd.endDnd`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post dnd\.endSnooze(Dnd_endSnoozeHeaders headers) returns json|error {
        string resourcePath = string `/dnd.endSnooze`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post dnd\.setSnooze(dnd_setSnooze_body payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/dnd.setSnooze`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post files\.comments\.delete(files_comments_delete_body payload, Files_comments_deleteHeaders headers = {}) returns json|error {
        string resourcePath = string `/files.comments.delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files\.delete(files_delete_body payload, Files_deleteHeaders headers = {}) returns json|error {
        string resourcePath = string `/files.delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files\.remote\.add(files_remote_add_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/files.remote.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post files\.remote\.remove(files_remote_remove_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/files.remote.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post files\.remote\.update(files_remote_update_body payload, map<string|string[]> headers = {}) returns Default\ success\ template|error {
        string resourcePath = string `/files.remote.update`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post files\.revokePublicURL(files_revokePublicURL_body payload, Files_revokePublicURLHeaders headers = {}) returns json|error {
        string resourcePath = string `/files.revokePublicURL`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files\.sharedPublicURL(files_sharedPublicURL_body payload, Files_sharedPublicURLHeaders headers = {}) returns json|error {
        string resourcePath = string `/files.sharedPublicURL`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files\.upload(files_upload_body payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/files.upload`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post pins\.add(pins_add_body payload, Pins_addHeaders headers) returns json|error {
        string resourcePath = string `/pins.add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post pins\.remove(pins_remove_body payload, Pins_removeHeaders headers) returns json|error {
        string resourcePath = string `/pins.remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post reactions\.add(reactions_add_body payload, Reactions_addHeaders headers) returns json|error {
        string resourcePath = string `/reactions.add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post reactions\.remove(reactions_remove_body payload, Reactions_removeHeaders headers) returns json|error {
        string resourcePath = string `/reactions.remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post reminders\.add(reminders_add_body payload, Reminders_addHeaders headers) returns json|error {
        string resourcePath = string `/reminders.add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post reminders\.complete(reminders_complete_body payload, Reminders_completeHeaders headers = {}) returns json|error {
        string resourcePath = string `/reminders.complete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post reminders\.delete(reminders_delete_body payload, Reminders_deleteHeaders headers = {}) returns json|error {
        string resourcePath = string `/reminders.delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post stars\.add(stars_add_body payload, Stars_addHeaders headers) returns json|error {
        string resourcePath = string `/stars.add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post stars\.remove(stars_remove_body payload, Stars_removeHeaders headers) returns json|error {
        string resourcePath = string `/stars.remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post usergroups\.create(usergroups_create_body payload, Usergroups_createHeaders headers) returns json|error {
        string resourcePath = string `/usergroups.create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post usergroups\.disable(usergroups_disable_body payload, Usergroups_disableHeaders headers) returns json|error {
        string resourcePath = string `/usergroups.disable`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post usergroups\.enable(usergroups_enable_body payload, Usergroups_enableHeaders headers) returns json|error {
        string resourcePath = string `/usergroups.enable`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post usergroups\.update(usergroups_update_body payload, Usergroups_updateHeaders headers) returns json|error {
        string resourcePath = string `/usergroups.update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post usergroups\.users\.update(usergroups_users_update_body payload, Usergroups_users_updateHeaders headers) returns json|error {
        string resourcePath = string `/usergroups.users.update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post users\.deletePhoto(users_deletePhoto_body payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/users.deletePhoto`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post users\.profile\.set(users_profile_set_body payload, Users_profile_setHeaders headers) returns json|error {
        string resourcePath = string `/users.profile.set`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post users\.setActive(Users_setActiveHeaders headers) returns json|error {
        string resourcePath = string `/users.setActive`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post users\.setPhoto(users_setPhoto_body payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/users.setPhoto`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post users\.setPresence(users_setPresence_body payload, Users_setPresenceHeaders headers) returns json|error {
        string resourcePath = string `/users.setPresence`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }
}
